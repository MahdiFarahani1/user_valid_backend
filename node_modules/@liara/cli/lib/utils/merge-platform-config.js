import path from 'node:path';
import fs from 'fs-extra';
import semver from 'semver';
import findFile from './find-file.js';
export default async function mergePlatformConfigWithDefaults(projectPath, platform, userProvidedConfig, debug) {
    if (platform === 'laravel') {
        return getDefaultLaravelPlatformConfig(projectPath, userProvidedConfig, debug);
    }
    if (platform === 'netcore') {
        return await detectNetCorePlatformVersion(projectPath, userProvidedConfig, debug);
    }
    return userProvidedConfig;
}
async function detectNetCorePlatformVersion(projectPath, userProvidedConfig, debug) {
    const newConfig = { ...userProvidedConfig };
    if (!userProvidedConfig.version) {
        const detectedNetCoreVersion = await getRequiredNetCoreVersion(projectPath, debug);
        if (detectedNetCoreVersion) {
            newConfig.version = detectedNetCoreVersion;
        }
    }
    return newConfig;
}
async function getRequiredNetCoreVersion(projectPath, debug) {
    var _a;
    const supportedNetCoreVersions = [
        '2.1',
        '2.2',
        '3.0',
        '3.1',
        '5.0',
        '6.0',
        '7.0',
        '8.0',
    ];
    try {
        const csproj = await findFile(projectPath, '**/*.csproj');
        if (!csproj) {
            debug(`Could not find .csproj file in ${projectPath}`);
            return null;
        }
        const csprojXml = fs.readFileSync(csproj, 'utf8');
        const dotNetVersion = normalizeVersion((_a = semver.coerce(csprojXml, { loose: true })) === null || _a === void 0 ? void 0 : _a.version);
        if (!supportedNetCoreVersions.find((v) => dotNetVersion === v)) {
            debug(`${dotNetVersion} is not a supported netcore version.`);
            return null;
        }
        return dotNetVersion;
    }
    catch (error) {
        if (error.syscall === 'open') {
            debug(`Could not open csproj to detect the netcore version. Skipping... message=${error.message}`);
            return null;
        }
        throw error;
    }
}
function getDefaultLaravelPlatformConfig(parojectPath, userProvidedConfig, debug) {
    const newConfig = { ...userProvidedConfig };
    if (!userProvidedConfig.phpVersion) {
        const detectedPHPVersion = getRequiredPHPVersion(parojectPath, debug);
        if (detectedPHPVersion) {
            newConfig.phpVersion = detectedPHPVersion;
        }
    }
    return newConfig;
}
function getRequiredPHPVersion(parojectPath, debug) {
    var _a, _b, _c;
    // semver forces us to use the full semver syntax,
    // but before returning the final result, we remove the last .0 part
    const supportedPHPVersions = ['8.1.0', '8.0.0', '7.4.0', '7.3.0', '7.2.0'];
    try {
        const composerJson = fs.readJSONSync(path.join(parojectPath, 'composer.json'));
        if ((_b = (_a = composerJson === null || composerJson === void 0 ? void 0 : composerJson.config) === null || _a === void 0 ? void 0 : _a.platform) === null || _b === void 0 ? void 0 : _b.php) {
            const range = convertSinglePipeToDouble(composerJson.config.platform.php);
            return normalizeVersion(semver.maxSatisfying(supportedPHPVersions, range));
        }
        if ((_c = composerJson === null || composerJson === void 0 ? void 0 : composerJson.require) === null || _c === void 0 ? void 0 : _c.php) {
            const range = convertSinglePipeToDouble(composerJson.require.php);
            return normalizeVersion(semver.maxSatisfying(supportedPHPVersions, range));
        }
        return null;
    }
    catch (error) {
        if (error.syscall === 'open') {
            debug(`Could not open composer.json to detect the php version. Skipping... message=${error.message}`);
            return null;
        }
        throw error;
    }
}
// https://getcomposer.org/doc/articles/versions.md#version-range
function convertSinglePipeToDouble(input) {
    return input.replace(/\|+/g, '||');
}
function normalizeVersion(version) {
    if (!version) {
        return null;
    }
    return version.replace(/.0$/, '');
}
